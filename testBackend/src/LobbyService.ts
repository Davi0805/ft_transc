import { TDynamicLobbySettings, TFriendlyPlayer, TLobbyUser, TRankedPlayer, TTournamentPlayer } from "./dependencies/lobbyTyping.js";
import { lobbyRepository } from "./LobbyRepository.js";
import { socketService } from "./SocketService.js";
import { userRepository } from "./UserRepository.js";

class LobbyService {

    addUser(lobbyID: number, userID: number) {
        const lobby = lobbyRepository.getLobbyByID(lobbyID);
        const userInfo = userRepository.getUserByID(userID);
        const user = {
            id: userInfo.id,
            username: userInfo.username,
            spriteID: userInfo.spriteID,
            rating: userInfo.rating,
            ready: false,
            player: null
        }
        lobby.users.push(user);

        if (lobby.users.length > 1) {

            console.log(lobby.users.length)
            socketService.broadcastToLobby(lobbyID, "addLobbyUser", { user: user })
        }
    }

    removeUser(lobbyID: number, userID: number) {
        const lobby = lobbyRepository.getLobbyByID(lobbyID);
        lobby.users = lobby.users.filter(user => user.id !== userID);
        
        socketService.broadcastToLobby(lobbyID, "removeLobbyUser", { id: userID })

        if (lobby.users.length === 0) {
            lobbyRepository.deleteLobby(lobbyID);
        }
    }

    updateSettings(lobbyID: number, settings: TDynamicLobbySettings) {
        const lobby = lobbyRepository.getLobbyByID(lobbyID);
        //In some situations, the users must be out of the slots
        let updateUsers = lobby.map !== settings.map && lobby.type !== "tournament"
        lobby.map = settings.map;
        lobby.mode = settings.mode;
        lobby.duration = settings.duration
        let users: TLobbyUser[] | null = null
        if (updateUsers) {
            lobby.users.forEach(user => {
                user.player = null;
            })
            users = lobby.users;
        }

        socketService.broadcastToLobby(lobbyID, "updateSettings", {
            settings: settings,
            users: users
        })
    }

    inviteUser(lobbyID: number, inviteeID: number) {
        console.log("Invite user not implemented yet!")
        //TODO
    }

    updateReadiness(lobbyID: number, userID: number, ready: boolean) {
        const user = lobbyRepository.getUserInLobby(lobbyID, userID);
        user.ready = ready

        socketService.broadcastToLobby(lobbyID, "updateReadiness", {
            userID: userID,
            ready: ready
        })
    }

    addFriendlyPlayer(lobbyID: number, userID: number, player: TFriendlyPlayer) {
        const user = lobbyRepository.getUserInLobby(lobbyID, userID);
        //id comes as -1, because is only setting that must be generated by backend
        player.id = this._currentUID++;
        if (!user.player) {
            user.player = [player]
        } else {
            (user.player as TFriendlyPlayer[]).push(player)
        }

        socketService.broadcastToLobby(lobbyID, "addFriendlyPlayer", {
            userID: userID,
            player: player
        })
    }

    removeFriendlyPlayer(lobbyID: number, userID: number, playerID: number) {
        const user = lobbyRepository.getUserInLobby(lobbyID, userID);
        user.player = (user.player as TFriendlyPlayer[]).filter(player => player.id !== playerID)
        if (user.player.length === 0) { user.player = null}

        socketService.broadcastToLobby(lobbyID, "removeFriendlyPlayer", {
            playerID: playerID
        })
    }

    addRankedPlayer(lobbyID: number, userID: number, player: TRankedPlayer) {
        const user = lobbyRepository.getUserInLobby(lobbyID, userID);
        user.player = player;

        socketService.broadcastToLobby(lobbyID, "addRankedPlayer", {
            userID: userID,
            player: player
        })
    }

    removeRankedPlayer(lobbyID: number, userID: number) {
        const user = lobbyRepository.getUserInLobby(lobbyID, userID);
        user.player = null;

        socketService.broadcastToLobby(lobbyID, "removeRankedPlayer", {
            id: userID
        })
    }

    addTournamentPlayer(lobbyID: number, userID: number) {
        const user = lobbyRepository.getUserInLobby(lobbyID, userID);
        user.player = {
            participating: true,
            score: 0,
            prevOpponents: [],
            teamPref: 0
        } as TTournamentPlayer
        
        socketService.broadcastToLobby(lobbyID, "addTournamentPlayer", {
            userID: userID,
            player: user.player
        })
    }

    removeTournamentPlayer(lobbyID: number, userID: number) {
        const user = lobbyRepository.getUserInLobby(lobbyID, userID);
        user.player = null;

        socketService.broadcastToLobby(lobbyID, "removeTournamentPlayer", {
            id: userID
        })
    }


    private _currentUID: number = 0;
}

export const lobbyService = new LobbyService()