const speakeasy = require('speakeasy');
const qrcode = require('qrcode');
const exception = require('../../Infrastructure/config/CustomException');
const temp2FARepository = require('../../Adapters/outbound/Repositories/Temp2FARepository');

class TwoFactorAuthService {

    /* 
    *    @brief Generates a secret key and a QR code URL for the user to scan with their device.
    *    @returns {object} - An object containing the secret key and the QR code URL
    */
    async generateSecret() {
        const secret = speakeasy.generateSecret({ length: 20 });
        const otpauth = secret.otpauth_url;
        const qrCodeUrl = await qrcode.toDataURL(otpauth);
        return {
            secret: secret.base32, // secret key to be stored in the database
            qrCodeUrl, // QR code URL to be displayed to the user registering the device
        };
    }

    /* 
    *    @brief This function verifies the token generated by the user's device using the secret key.
    *    @param {string} secret - The secret key generated by the server
    *    @param {string} token - The token generated by the user's device
    *    @returns {boolean} - Returns true if the token is valid, false otherwise
    *    @throws 400 - Bad request
    */
    async verifyToken(secret, token) {
        const verified = speakeasy.totp.verify({
            secret,
            encoding: 'base32',
            token,
        });

        if (!verified) throw exception('Failed to authenticate your 2FA token', 400);
        return verified;
    }

    async saveTempTwoFa(user_id, secret)
    {
        await temp2FARepository.save(user_id, secret);
    }


    async confirmTwoFaActivation(user_id, token)
    {
        const secret = await temp2FARepository.get(user_id);
        if (!secret) throw exception('Activation failed', 400);
        if (!await this.verifyToken(secret, token)) throw exception('Activation failed', 400);
        return secret;
    }
    
}

module.exports = new TwoFactorAuthService();