import { CGameDTO, SGameDTO } from "../../match/matchSharedDependencies/dtos"
import { SIDES, ROLES } from "../../match/matchSharedDependencies/sharedTypes"

export type InboundDTOMap = {
    updateSettings: {
        settings: TDynamicLobbySettings
    }
    inviteUserToLobby: {
        userID: number
    }
    updateReadiness: {
        ready: boolean 
    },
    //Do not forget to update the participating flag in the backend
    //I am still not convinced that the small optimization of only sending the absolute minimum
    // is worth duplicating logic code and the risk of going out of sync, but whatever
    addFriendlyPlayer: {
        player: TFriendlyPlayer
    },
    removeFriendlyPlayer: {
        id: number
    }
    addRankedPlayer: {
        player: TRankedPlayer
    },
    removeRankedPlayer: {
        id: number 
    }
    addTournamentPlayer: null //None of the members are chosen by the user
    removeTournamentPlayer: null
    leaveLobby: null,
    startGame: null,
    
    //Game dto:
    updateGame: CGameDTO
}

export type OutboundDTOMap = {
    joinLobby: {
        lobby: TLobby,
        users: {
            id: number,
            ready: boolean,
            host: boolean
        }[]
    }
    updateSettings: {
        settings: TLobby
        updateSlots: boolean
    },
    updateReadiness: {
        userID: number,
        ready: boolean
    }
    addLobbyUser: {
        id: number,
        ready: boolean,
        host: boolean
    },
    removeLobbyUser: {
        id: number
    }
    addFriendlyPlayer: {
        userID: number
        player: TFriendlyPlayer
    },
    removeFriendlyPlayer: {
        id: number
    }
    addRankedPlayer: {
        userID: number
        player: TRankedPlayer
    },
    removeRankedPlayer: {
        id: number 
    }
    addTournamentPlayer: {
        userID: number
    }
    removeTournamentPlayer: {
        id: number
    }
    startMatch: null

    //Game dto:
    updateGame: SGameDTO
}

export type InboundDTO<T extends keyof InboundDTOMap = keyof InboundDTOMap> = {
    requestType: T,
    data: InboundDTOMap[T]
}

export type OutboundDTO = {
    [K in keyof OutboundDTOMap]: {
        requestType: K,
        data: OutboundDTOMap[K]
    }
}[keyof OutboundDTOMap]


export type TLobbyType = "friendly" | "ranked" | "tournament"
export type TMapType = "2-players-small" | "2-players-medium" | "2-players-big" | "4-players-small" | "4-players-medium" | "4-players-big"
    | "2-teams-small" | "2-teams-medium" | "2-teams-big" | "4-teams-small" | "4-teams-medium" | "4-teams-big"
export type TMatchCapacity = { taken: number, max: number }
export type TMatchMode = "classic" | "modern"
export type TMatchDuration = "blitz" | "rapid" | "classical" | "long" | "marathon"

export type TLobby = {
    id: number,
    hostID: number,
    name: string,
    host: string,
    type: TLobbyType,
    capacity: TMatchCapacity,
    map: TMapType,
    mode: TMatchMode,
    duration: TMatchDuration,
    round: number
}

export type TStaticLobbySettings = Pick<TLobby, "id" | "hostID" | "name" | "host" | "type">;
export type TDynamicLobbySettings = Pick<TLobby, "map" | "mode" | "duration">

export  type TMatchPlayer = {
    userID: number | null //Same as userID
    id: number | null, //To be generated.
    nickname: string | null //If null, take the nick from userid
    spriteID: number | null, //If null, take spriteID from settings of userid
    team: SIDES,
    role: ROLES,
    //leftControl: string,
    //rightControl: string,
    //ready: boolean
}

export type TTournPlayer = {
    id: number | null // Same as userID
    nick: string | null // To be taken from userid
    score: number //default: 0
    rating: number //get from userid
    prevOpponents: number[] //default[]
    teamDist: number //default: 0
    participating: boolean //default: true
    //TODO: IN TOURNAMENT SERVICE, ONLY PAIR PLAYERS THAT HAVE THIS FLAG SET TO TRUE!!!!
    ready: boolean
}


export type TUser = {
    //Stuff from database
    id: number,
    nickname: string,
    spriteID: number
    rating: number

    //Stuff about lobby
    ready: boolean, //Default is false
    participating: boolean //Default is false
    player: TFriendlyPlayer[] | TRankedPlayer | TTournamentPlayer //Depends on the type of lobby
}

export type TFriendlyPlayer = {
    id: number | null, //GENERATED BY BACKEND!!
    nickname: string,
    spriteID: number
    team: SIDES,
    role: ROLES
}

export type TRankedPlayer = {
    team: SIDES,
    role: ROLES
}

//As soon as this one is created, it should never be set to null. Only participating to false
export type TTournamentPlayer = {
    applied: boolean,
    score: number,
    prevOpponents: number[],
    teamDist: number,
}

