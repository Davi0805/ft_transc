import { ROLES, SIDES } from "../../match/matchSharedDependencies/sharedTypes";
import { router } from "../../routes/router";
import { lobbyService } from "../../services/LobbyService";
import { matchService } from "../../services/matchService";
import { LobbyPage } from "./lobby";
import { TDuration, TDynamicLobbySettings, TMap, TMode } from "./lobbyTyping";
import { areAllSlotsFull } from "./utils/helpers";
import { flashButton, toggleButton } from "./utils/stylingComponents";

export function applySettingsClicked(e: SubmitEvent) {
    e.preventDefault();
    const form = e.target as HTMLFormElement;
    const formData = new FormData(form);

    lobbyService.updateSettingsIN({
        map: formData.get('match-map') as TMap,
        mode: formData.get('match-mode') as TMode,
        duration: formData.get('match-duration') as TDuration
    })
    console.log("New settings applied!")
}

export function inviteUserClicked(inviteeID: number) {
    lobbyService.inviteUserToLobby(inviteeID)
}

export function leaveClicked() {
    lobbyService.leave()
    router.navigateTo('/play')
}

export function readyClicked(readyButton: HTMLButtonElement) {
    if (!lobbyService.isUserParticipating(lobbyService.myID)) {
        flashButton(readyButton, "You must join first!")
    } else {
        const state = toggleButton(readyButton, "I'm ready! (cancel...)", "Ready");
        lobbyService.updateReadinessIN(state);
    }
}

export function startClicked(startButton: HTMLButtonElement) {
    if (!lobbyService.isEveryoneReady()) {
        flashButton(startButton, "Not everyone is ready!");
    } else if (lobbyService._isLobbyOfType("ranked") && !areAllSlotsFull(lobbyService.getSlots())) {
        flashButton(startButton, "Not all slots are filled!")
    } else {        
        lobbyService.startMatchIN();
    }
}

export function joinFriendlyClicked(e: SubmitEvent, team: SIDES, role: ROLES) {
    e.preventDefault()
    const form = e.target as HTMLFormElement;
    if (!form.reportValidity()) return;
    const formData = new FormData(form);

    const alias = formData.get("player-alias") as string
    const spriteID = Number(formData.get("player-paddle") as string)

    lobbyService.addFriendlyPlayerIN({
        id: -1, //This is supposed to be generated by backend
        nickname: alias,
        spriteID: spriteID,
        team: team,
        role: role 
    });

    const leftKey = formData.get("left-key") as string
    const rightKey = formData.get("right-key") as string
    matchService.addControls(-1, {
        left: leftKey,
        right: rightKey
    })
}

export function withdrawFriendlyClicked(playerID: number) {
    matchService.removeControls(playerID);
    lobbyService.removeFriendlyPlayerIN(playerID)
}

export function joinRankedClicked(team: SIDES, role: ROLES) {
    matchService.addDefaultControls(lobbyService.myID, team);
    lobbyService.addRankedPlayerIN({
        team: team,
        role: role
    });
}

export function withdrawRankedClicked(playerID: number) {
    matchService.removeControls(playerID);
    lobbyService.removeRankedPlayerIN(playerID)
}

export function joinWithdrawTournamentClicked(state: boolean) {
    if (state === true) {
        lobbyService.addTournamentPlayerIN()
    } else {
        lobbyService.removeTournamentPlayerIN()
    }
}